
** Instantiating New Threads

        * First way
        public class MyThread extends Thread {

            private final int mSeed;

            public MyThread (int seed){
               mSeed = seed;
            }

            @Override
            public void run(){
               // perform some calculation
            }
        }

        Thread thread = new MyThread(10);
        thread.start();

        ------------------
        * Second way
        Runnable runnable = new Runnable (){
           @Override
           public void run (){
               int seed = 10;
               // perform some calculation
           }
        }

        Thread thread = new Thread (runnable)
        thread.start();


** Important roots in android application (Memory leak)

   1. Objects referenced from static fields
   2. Instances of Application class
   3. Live threads

   Anonymous Threads
   if you use a Thread with no name like this

      class MainActivity extends AppCompatActivity {
          onCreate(){
             new Thread(new Runnable()) {
                @Override
                public void run(){

                }
             }.start();
          }
      }

   this causes memory leak in MainActivity.

** Thread Termination Strategies

   1. Return from run() after successful execution

            class MainActivity extends AppCompatActivity {

            private FetchItemsEndpoint mFetchItemsEndpoint;
            private itemsDao mItemsDao;

                onCreate(){
                   new Thread(new Runnable()) {
                      @Override
                      public void run(){
                         List <Item> items = mFetchItemsEndpoint.fetch();
                         mItemsDao.insertItems(items)
                      }
                   }.start();
                }
            }

        Anonymous Thread can access Activity's fields because it has implicit
        reference to the enclosing object.

   2. Return from run() in response to internal error

      class MainActivity extends AppCompatActivity {

              private FetchItemsEndpoint mFetchItemsEndpoint;
              private itemsDao mItemsDao;

                  onCreate(){
                     new Thread(new Runnable()) {
                        @Override
                        public void run(){
                           List <Item> items;
                           try{
                              items = mFetchItemsEndpoint.fetch();
                           } catch(IOException e){
                               return;
                           }
                           mItemsDao.insertItems(items)
                        }
                     }.start();
                  }
              }

        When you return in an error there is no problem for memory leak.

   3. Return from run() in response to externally set flag

        class MainActivity extends AppCompatActivity {

                      private FetchItemsEndpoint mFetchItemsEndpoint;
                      private itemsDao mItemsDao;
                      private AtomicBoolean mFetchAborted = new AtomicBoolean(false);

                          onCreate(){
                             new Thread(new Runnable()) {
                                @Override
                                public void run(){
                                   List <Item> items = mFetchItemsEndpoint.fetch();
                                   if (mFetchAborted.get()){
                                      return;
                                   }
                                   mItemsDao.insertItems(items)
                                }
                             }.start();
                          }
                      }

   4. Return from run() in response to interruption

         class MainActivity extends AppCompatActivity {

                      private FetchItemsEndpoint mFetchItemsEndpoint;
                      private itemsDao mItemsDao;
                      private Thread thread;

                          onCreate(){
                             thread = new Thread(new Runnable()) {
                                @Override
                                public void run(){
                                   List <Item> items = mFetchItemsEndpoint.fetch();
                                   if (thread.interrupted()){
                                      return;
                                   }
                                   mItemsDao.insertItems(items)
                                }
                             }
                             thread.start();
                          }
                      }

         - to interrupt a thread from outside, we need to have a reference to it
         - thread interruption might look like externally set flag, but
           it is much more nuanced and complex mechanism

** UI Thread Characteristics

    1. Started by Android Framework when application start
    2. Terminated only when application's process terminates
    3. Application's user interface is "drawn" on UI thread
    4. Lifecycle callbacks (e.g onStart(),onStop()) are executed on UI thread
    5. User interaction event handlers (e.g onClick()) are executed on UI thread
    6. Changes of user interface must be performed on UI thread

** UI Responsiveness Requirements

    1. Android applications should render 60 frames per seconds (FPS)
    2. New frame each 16 milliseconds
    3. Your code should not execute on UI thread for longer than few milliseconds

** UI Responsiveness Warnings Signs

    1. Freezes of user interface, non-smooth animations, etc.
    2. Notifications about skipped frames in logcat
       I/Choreographer: Skipped 611 frames! The application may be doing roo much work on it's main thread.

       611 frames * 16 ms = 10 seconds

    3. Crashes due to Application Not Responding (ANR) error

    Zero skipped frames is one of the fundamental quality standards of Android applications

    All time-consuming operations should be offloaded to background threads

** If you want access views from background thread, you get CalledFromWrongThreadException :
   You have to pass value in main thread and set it views

   new Thread(() -> {
   long startTimestamp = System.currentTimeMillis();
   long endTimestamp = startTimestamp + ITERATIONS_COUNTER_DURATION_SEC * 1000;

   int iterationsCount = 0;
   while (System.currentTimeMillis() <= endTimestamp) {
   iterationsCount++;
   }

   Log.d(
   "Exercise1",
   "iterations in " + ITERATIONS_COUNTER_DURATION_SEC + "seconds: "
   + iterationsCount
   );

   btn.setText("") // CalledFromWrongThreadException (You should use Handler : Look at UiHandlerDemonstrationFragment)
   }).start();

** UI thread is a special "looper" thread that Android framework starts for each application

** UI Thread Rules of Thumb
1. Don't perform any long-running tasks on UI thread (longer than few milliseconds)
2. Offload long-running tasks to background threads
3. Return execution from background to UI thread for user interface manipulations
4. Aim at zero skipped frames and watch for warning signs

** Most of your application's code should execute on UI thread : lifecycle, UI Interactions, navigation, etc

** Preemptive Multitasking Execution :

instr0      instr1      instr2      instr3 .. instrN
                                    1. stop
                                    4. continue again

instr0      instr1      instr2      instr3 .. instrN
2. start                3. stop

If different threads don't access the same state, no special precautions are required.
If more than one thread accesses the same part of program's tate (shared state),
You need yo ensure "thread-safety"

Thread Safety Concerns

   Visibility
   When a variable volatile this means that read and write it from directly memory.

   Atomicity
   When you make read, modify and write operation for a value in a thread,
   you don't have to access this value from another thread. That is the key concept.
   No other thread should allowed the access the variable.

   Happens Before

